/*
 * Kloader transition code:
 */
#include <linux/linkage.h>
#include <linux/init.h>
#include <asm/pgtable_types.h>
#include <asm/page_types.h>
#include <asm/msr.h>
#include <asm/segment.h>
#include <asm/processor-flags.h>

#define BOOT_CS       0x10
#define BOOT_DS       0x18
#define BOOT_CS64     0x20
#define KERN_PAGE_MID 0x63
#define KERN_PAGE     0x0e3
	
#define MSR_EFER                0xc0000080
	
.section .rodata, "a", @progbits
.code16

.globl ihk_smp_trampoline_data
base = .
ihk_smp_trampoline_data:
	jmp     cpu_start_body

	.org	8
header_pgtbl:
	.quad	0		/* page table address */
header_load:	
	.quad	0		/* load address */
stack_ptr:
	.quad	0		/* initial stack */
notify_address:
	.quad	0		/* where to notify? */

cpu_start_body:	
	cli
	wbinvd

	movw	%cs, %ax
	movw	%ax, %ds
	movw	%ax, %es
	movw	%ax, %ss

	xorl	%ebx, %ebx
	movw	%cs, %bx
	shll	$4, %ebx

	/* Adjust GDT ptr to the 32-bit physical address */
	addl	%ebx, boot_gdtptr + 2 - base
	addl    %ebx, 2f - base
	addl    %ebx, start_64_vec - base
	
	lgdtl	boot_gdtptr - base
	lidtl	boot_idtptr - base

	jmp     1f
1:	
	
	movl	%cr0, %edx
	orb	$1, %dl
	movl	%edx, %cr0

	ljmpl	*(2f - base)
2:	.long	protect_start - base
	.word	BOOT_CS

.balign  8
.code32
protect_start:
	movl    $(BOOT_DS), %eax
	movl	%eax, %ds
	movl    %eax, %ss

	/* Enable PAE */
	movl    %cr4, %eax
	orl     $0x20, %eax
	movl    %eax, %cr4

	leal    (stack_end - base)(%ebx), %esp
	
	/* Load a page table */
	movl    (header_pgtbl - base)(%ebx), %eax
	movl	%eax, %cr3
	
	movl    (header_load - base)(%ebx), %ecx
	movl	(stack_ptr - base)(%ebx), %eax
	jz	1f
	movl	%eax, %esp
1:

	/* Enable Long Mode */
	movl    $MSR_EFER, %ecx
	movl 	$EFER_LME, %eax
	xorl	%edx, %edx
	wrmsr

	/* Enable Paging */
	movl	%cr0, %edx
	orl	$0x80000000, %edx
	movl	%edx, %cr0

	ljmp    *(start_64_vec - base)(%ebx)
	
.code64
.balign 8 
start_64:
	/* Okay, we are completely in the long mode ! */
	movq	%cr3, %rax
	movq	%rax, %cr3

	movq    (header_load - base)(%ebx), %rcx
	cmpq	$0, %rcx
	/* If Loading IP is zero, just enter the infinite loop */
	jz	2f

	movq	(stack_ptr - base)(%ebx), %rax
	jz	1f
	movq	%rax, %rsp
1:
	/* Now, we prepare the parameters */
	movq	(notify_address - base)(%ebx), %rdi
	jmp	*%rcx

2:
	movq	$2, 0(%rax)
3:	
	cli
	hlt
	jmp	3b

boot_idtptr:
	.short	0
	.long	0
	
boot_gdtptr:
	.short	boot_gdt32_end - boot_gdt32
	.long	boot_gdt32 - base
	.align	4
boot_gdt32:
	.quad	0
	.quad	0
	.quad	0x00cf9b000000ffff
	.quad	0x00cf93000000ffff
	.quad   0x00af9b000000ffff
	.quad	0x0000890000000067
boot_gdt32_end:

start_64_vec:
	.long   start_64 - base
	.word   BOOT_CS64, 0
	
stack:
	.org    0x1000
stack_end:
.globl ihk_smp_trampoline_end
ihk_smp_trampoline_end:
